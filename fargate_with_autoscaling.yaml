AWSTemplateFormatVersion: 2010-09-09
Parameters:
  applicationName:
    Type: String
    Default: applicationstack
  lowCPU:
    Type: String 
    Default: 30
  highCPU:
    Type: String
    Default: 70  
Outputs:
  MyStackName:
    Value: !Ref 'AWS::StackName'
  URL:
    Value: !GetAtt 
      - loadBalancer
      - DNSName
Resources:
  ImageRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Ref applicationName
      Tags:
        - Key: Name
          Value: !Ref applicationName
  VPC:
    Type: 'AWS::EC2::VPC'
    Description: ALB VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value: !Ref applicationName
  internetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref applicationName
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref internetGateway
  Subnet1:
    Type: 'AWS::EC2::Subnet'
    Description: ALB VPC
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref applicationName
  Subnet2:
    Type: 'AWS::EC2::Subnet'
    Description: ALB VPC
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref applicationName
  routeTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref applicationName
  subnet1RouteTableAssocation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref routeTable
      SubnetId: !Ref Subnet1
  subnet2RouteTableAssocation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref routeTable
      SubnetId: !Ref Subnet2
  routeToInternet:
    Type: 'AWS::EC2::Route'
    DependsOn: internetGateway
    Properties:
      RouteTableId: !Ref routeTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
  taskdefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: 'arn:aws:iam::829867751173:role/ecsTaskExecutionRole'
      ExecutionRoleArn: 'arn:aws:iam::829867751173:role/ecsTaskExecutionRole'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      ContainerDefinitions:
        - Name: !Ref applicationName
          Image: >-
            829867751173.dkr.ecr.eu-west-1.amazonaws.com/applications/spring-boot-web-jsp:latest
          PortMappings:
            - ContainerPort: '8080'
              HostPort: '8080'
          Essential: 'true'
          HealthCheck:
            Retries: '3'
            Command:
              - CMD-SHELL
              - 'curl -f http://localhost:8080 || exit 1'
            Timeout: '60'
            Interval: '60'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref logGroup
              awslogs-region: eu-west-1
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: !Ref applicationName
  logGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref applicationName
      RetentionInDays: 14
  loadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref applicationName
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
      Scheme: internet-facing
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      Type: application
      Tags:
        - Key: Name
          Value: !Ref applicationName
  HTTPlistener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref targetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: HTTP
  targetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: loadBalancer
    Properties:
      Port: '8080'
      Protocol: HTTP
      VpcId: !Ref VPC
      Name: !Ref applicationName
      TargetType: ip
      HealthCheckTimeoutSeconds: '5'
      HealthCheckEnabled: 'true'
      HealthCheckPath: /
      HealthCheckIntervalSeconds: '60'
      Tags:
        - Key: Name
          Value: !Ref applicationName
  loadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Load Balancer Security Group
      GroupName: loadBalancerSecurityGroup
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: TCP
          ToPort: 80
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref applicationName
  serviceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Service security group
      GroupName: serviceSecurityGroup
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 8080
          IpProtocol: TCP
          ToPort: 8080
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          IpProtocol: TCP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref applicationName
  cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref applicationName
      Tags:
        - Key: Name
          Value: !Ref applicationName
  service:
    Type: 'AWS::ECS::Service'
    Properties:
      LaunchType: FARGATE
      Cluster: !Ref cluster
      DesiredCount: '2'
      TaskDefinition: !Ref taskdefinition
      LoadBalancers:
        - ContainerName: !Ref applicationName
          ContainerPort: 8080
          TargetGroupArn: !Ref targetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref serviceSecurityGroup
          AssignPublicIp: ENABLED
      Tags:
        - Key: Name
          Value: !Ref applicationName
  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - !Ref applicationName
            - !GetAtt service.Name
      MinCapacity: 2
      MaxCapacity: 10
      RoleARN: 'arn:aws:iam::829867751173:role/ecsAutoscaleRole'
  ScaleDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    DependsOn: ScalableTarget
    Properties:
      PolicyName: !Sub 'scale-${applicationName}-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: Average
        Cooldown: 60
  ScaleUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    DependsOn: ScalableTarget
    Properties:
      PolicyName: !Sub 'scale-${applicationName}-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 25
            ScalingAdjustment: 3
        MetricAggregationType: Average
        Cooldown: 60
  LowCpuUsageAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub 'low-cpu-${applicationName}'
      AlarmDescription: !Sub 'Low CPU utilization for application ${applicationName}'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: service
        - Name: ClusterName
          Value: cluster
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: !Ref lowCPU 
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy
  HighCpuUsageAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub 'high-cpu-${applicationName}'
      AlarmDescription: !Sub 'High CPU utilization for application ${applicationName}'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: service
        - Name: ClusterName
          Value: cluster
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: !Ref highCPU
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy
